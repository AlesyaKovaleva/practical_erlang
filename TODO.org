* 05. kv структуры

Нативные: map (реализация внутри виртуальной машины на С, императивными алгоритмами)
Построенные поверх tuple & list: proplist, dict, orddict, gb_trees (интерпретируемый функциональный код)

dict, orddict, gb_trees -- устарели
proplist -- широко используется

CRUD операции
2 вида функций read/update:
- бросающие исключение
- возвращающие монаду {ok, Val} | error

таблица CRUD операций для разных структур
показать неконсистентность синтаксиса по именам функций, аргументам, возвращаемым значениям (монады сделаны по-разному)
которая характерна и для других мест в стандартных либах

Наличие map, fold, filter


* 06. ets
в практическом задании сложности с отладкой
объяснить, как это лушче делать.
(тестить через консоль, читать сообщения об ошибках)


* 07. строки
Вроде бы все ок, но кажется, что можно сделать как-то лучше.
Много мелких примеров, в которых я ошибаюсь при live coding.
Наверное, поможет, если сделать хорошую презентацию.


* 08. concurrency
убрать сложный пример кода с почтовым ящиком
заменить на картинку -- схему как он работает:
- FIFO
- receive, patterns, after

добавить про exit(Pid, shutdown)

пример loop-receive-echo-loop показать уже здесь

Подготовить к практике MapReduce. Схема как можно наладить общение между потоками.
Должна быть в README.

модель акторов
добавить в урок про многопотоность
Модель акторов в других языках (akka)


* 09. gen_server_1
- схема из 4х квадратов, как в gen_server_2 только для нашей кастомной реализации


* 10. gen_server_2
схема deadlock
прямой и через цепочку вызовов


* 12. supervisor
simple_one_for_one, можно ли остановить/удалить child?


* 13. Application
- показывать observer. На примере solution или на каком-нибудь другом примере.


* 14. OTP
- структуру проекта на примере rebar3 а не rebar2
- показать wgnet либы
- cowboy, cowlib, ranch -- пример OTP приложений
- схема -- проблема с транзитивными либами


* 15. обработка ошибок
- рассказать про pipeline
- показать, как это выглядит на OCaml (Haskell)


* курсовая работа

- не хватает ebin/*.app с метаинфой и настройками.
  видимо, просто не запушил в репозиторий

- проверить на 20-м эрланге

- ff_game
  + list_zipper:find + tests
  + matrix_zipper:find + tests
  - move (unit tests for each step)
    + find player on field (x,y)
    - move player to direction
    - fall previous cell
    - check is new cell stable, don't allow move if not
  - fall neighbour cells recursivelly

- telnet-client, TCP-socket
- game protocol

- login, join game

- game for each pair of players
  - game field for each game
  - step by step moves
  - game over

- functional tests
  tcp-client and game protocol
