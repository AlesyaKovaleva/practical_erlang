* 08. concurrency

картинка-схема, как работает почтовый ящик

добавить про exit(Pid, shutdown)

Подготовить к практике MapReduce. Схема как можно наладить общение между потоками.
Должна быть в README.


* 09. gen_server_1
- схема из 4х квадратов, как в gen_server_2 только для нашей кастомной реализации


* 10. gen_server_2
схема deadlock
прямой и через цепочку вызовов


* 11. link monitor

новая реализация main, отшлифовать, поправить нейминг, оставить вместо старой


* 12. supervisor
simple_one_for_one, можно ли остановить/удалить child?

убрать старые версии init, оставить только новые, на мапах


* 13. Application
- показывать observer. На примере solution или на каком-нибудь другом примере.


* 14. OTP
- структуру проекта на примере rebar3 а не rebar2
- показать wgnet либы
- cowboy, cowlib, ranch -- пример OTP приложений
- схема -- проблема с транзитивными либами


* 15. обработка ошибок
- рассказать про pipeline
- показать, как это выглядит на OCaml (Haskell)
https://github.com/yzh44yzh/erl_fun_composition

* курсовая работа

- не хватает ebin/*.app с метаинфой и настройками.
  видимо, просто не запушил в репозиторий

- проверить на 20-м эрланге

- ff_game
  + list_zipper:find + tests
  + matrix_zipper:find + tests
  - move (unit tests for each step)
    + find player on field (x,y)
    - move player to direction
    - fall previous cell
    - check is new cell stable, don't allow move if not
  - fall neighbour cells recursivelly

- telnet-client, TCP-socket
- game protocol

- login, join game

- game for each pair of players
  - game field for each game
  - step by step moves
  - game over

- functional tests
  tcp-client and game protocol
